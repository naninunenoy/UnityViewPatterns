@startuml BMIAppArchitecture

package BMIApp {
    /'
    package CleanArchitecture {
        interface ISceneMain
        interface IUseCase {
            void Begin()
        }
        interface IPresenter
        interface IVew
        interface IRepostiroy
        interface IDataStore
        interface IController
        interface IEntity
    }
    '/
    package Login {
        class LoginMain
        class AuthUseCase {
            void Begin()
        }
        class AlertUseCase {
            void Begin()
        }
        class SceneTransitionUseCase {
            void Begin()
        }
        interface IAuthResultDelegate {
            void OnAuthSuccess()
            void OnAuthFailure()
        }
        interface IAuthController {
            Task<string> TryGetTokenAsync(string, string)
        }
        class DummyAuthController
        interface ILoginPressenter {
            IReadOnlyReactiveProperty IdInput { get }
            IReadOnlyReactiveProperty PasswordInput { get }
            IObservable<Unit> LoginButtonClickObservable { get }
            void Begin()
            void SetLoginButtonInteractive(bool)
        }
        class LoginPresenter
        interface ILoginView {
            InputField IdInputField { get }
            InputField PasswordInputField { get }
            Button LoginButton { get }
        }
        class LoginView
        interface IAlertPresenter {
            IObservable<Unit> CloseButtonClickObservable { get }
            void Begin()
            void Open(string)
            void Close()
        }
        class AlertPresenter
        interface IAlertView {
            Button CloseButton { get }
            Text AlertText { get }
            Transform ViewTransform { get }
        }
        class AlertView
    }
    package BMI {
        class BMISceneMain
        class BMIUseCase {
            void Begin()
        }
        class HistoryUseCase {
            void Begin()
        }
        class LogoutUseCase {
            void Begin()
        }
        interface IPushHistoryDelegate {
            void OnPushBMIData(IBMIDataTransferObject)
        }
        package Domain {
            interface IBMIDomainObject {
                float Height { get }
                float Weight { get }
            }
            interface IBMIDomain {
                float CalcBMI(IBMIDomainObject)
                string EvaluateBMI(IBMIDomainObject)
            }
            class BMIDomain
        }
        interface IBMIPresenter {
            IReadOnlyReactiveProperty<string> NameInput { get }
            IReadOnlyReactiveProperty<string> HeightInput { get }
            IReadOnlyReactiveProperty<string> WeightInput { get }
            IReadOnlyReactiveProperty<string> AgeInput { get }
            IReadOnlyReactiveProperty<bool> GenderMaleSelect { get }
            IReadOnlyReactiveProperty<bool> GenderFemaleSelect { get }
            IObservable<Unit> SaveButtonClickObservable { get }
            void Begin()
            void SetBMIResult(string)
            void SetSaveButtonEnable(bool)
        }
        class BMIPresenter
        interface IBMIView {
            InputField NameInput { get }
            InputField HeightInput { get }
            InputField WeightInput { get }
            InputField AgeInput { get }
            Toggle GenderMaleToggle { get }
            Toggle GenderFemaleToggle { get }
            Text BMIText { get }
            Button SaveButton { get }
        }
        class BMIView
        interface IHistoryListPresenter {
            IObservable<Unit> ClearButtonClickObservable { get }
            void Add(string, string, string)
            void ClearList()
        }
        class HistoryListPresenter
        interface IHisotryView {
            Button ClearButton { get }
            Transform ViewTransform { get }
        }
        class HistoryView
        interface IHistoryElmView {
            Text DateText { get }
            Text NameText { get }
            Text BMIText { get }
            IHistoryElmView Clone(Transform);
        }
        class HistoryElmView
        interface IAccountPresenter {
            void Begin()
            IObservable<Unit> LogoutButtonClickObservable { get }
            void SetAccountText(string)
        }
        class AccountPresenter
        interface IAccountView {
            Button LogoutButon { get }
            Text AccountNameText { get }
        }
        class AccountView
        enum Gender {
            None
            Male
            Female
        }
        interface IBMIDataTransferObject {
            string Name { set get }
            float Height { set get }
            float Weight { set get }
            int Age { set get }
            Gender Gender { set get }
            float BMI { set get }
            DateTime CreatedAt { set get }
        }
        class BMIDataTransferObject
        class BMIDataTransferObjectArray
        interface IHistoryRepository {
            Task SaveAsync(IBMIDataTransferObject data)
            Task<IEnumerable<IBMIDataTransferObject>> LoadAllAsync()
            Task DeleteAllAsync()
        }
        class HistoryRepository
        interface IHistoryDataStore {
            IList<IBMIDataTransferObject> Datas { get }
            Task LoadAsync();
            Task SaveAsync();
            Task DeleteAsync();
        }
        class PlayerPrefsHistoryDataStore
        class TemporaryHistoryDataStore
    }

    interface IUserAccountRepository {
        string CurrentUserId { set get }
        string CurrentUserToken { set get }
        void Clear()
    }
    class UserAccountRepository
    interface ISharedDataStore {
        string CurrentUserId { set get }
        string CurrentUserToken { set get }
        void Clear()
    }
    class SharedScriptableObject
}

'' ログインシーン
LoginMain -down-> AuthUseCase
LoginMain -down-> AlertUseCase
LoginMain -down-> SceneTransitionUseCase

AuthUseCase .down.> ILoginPressenter
AuthUseCase .up.> IAuthResultDelegate
LoginPresenter .up.|> ILoginPressenter
LoginPresenter .down.> ILoginView
AuthUseCase .down.> IUserAccountRepository
LoginView .up.|> ILoginView
UserAccountRepository .up.|> IUserAccountRepository
SharedScriptableObject .up.|> ISharedDataStore
UserAccountRepository .down.> ISharedDataStore
AuthUseCase .down.> IAuthController
DummyAuthController .up.|> IAuthController

AlertUseCase .down.> IAlertPresenter
AlertUseCase .up.|> IAuthResultDelegate
AlertPresenter .up.|> IAlertPresenter
AlertView .up.|> IAlertView
AlertPresenter .down.> IAlertView

SceneTransitionUseCase .up.|> IAuthResultDelegate

'' BMIシーン
BMISceneMain -down-> BMIUseCase
BMISceneMain -down-> HistoryUseCase
BMISceneMain -down-> LogoutUseCase

BMIDomain .|> IBMIDomain
IBMIDomain -> IBMIDomainObject
BMIUseCase -> IBMIDomain
BMIDataTransferObject .|> IBMIDomainObject

IBMIDataTransferObject -up-> Gender
BMIDataTransferObject .down.|> IBMIDataTransferObject
IHistoryDataStore -up-> IBMIDataTransferObject
IHistoryRepository -up-> IBMIDataTransferObject
BMIDataTransferObjectArray -right-> BMIDataTransferObject
PlayerPrefsHistoryDataStore ---> BMIDataTransferObjectArray

BMIUseCase .up.> IPushHistoryDelegate
BMIUseCase .down.> IBMIPresenter
BMIPresenter .up.|> IBMIPresenter
BMIPresenter .down.> IBMIView
BMIView .up.|> IBMIView

HistoryUseCase .up.|> IPushHistoryDelegate
HistoryUseCase .down.> IHistoryListPresenter
HistoryListPresenter .up.|> IHistoryListPresenter
HistoryListPresenter .down.> IHisotryView
HistoryListPresenter .down.> IHistoryElmView
HistoryView .up.|> IHisotryView
HistoryElmView .up.|> IHistoryElmView
HistoryUseCase .down.> IHistoryRepository
HistoryRepository .up.|> IHistoryRepository
HistoryRepository .down.> IHistoryDataStore
TemporaryHistoryDataStore .up.|> IHistoryDataStore
PlayerPrefsHistoryDataStore .up.|> IHistoryDataStore

LogoutUseCase .down.> IUserAccountRepository
LogoutUseCase .down.> IAccountPresenter
AccountPresenter .up.|> IAccountPresenter
AccountPresenter .down.> IAccountView
AccountView .up.|> IAccountView

IAccountPresenter -[hidden]left-> IHistoryRepository
BMIUseCase -[hidden]right-> IBMIDataTransferObject
BMIUseCase -[hidden]right-> IBMIDomain
@enduml
